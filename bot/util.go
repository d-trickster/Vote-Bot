package bot

import (
	"fmt"
	"slices"
	"strings"
	"vote/storage"
)

const (
	msgHelp = `<b>–Ø –±–æ—Ç.</b>

/status - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ –≥–æ–ª–æ—Å–æ–≤
/vote - –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Ñ–∏–ª—å–º (–≤ –ª—Å)
/add –ë–æ—Ä–∞—Ç 2 - –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–æ–∫
/status_full - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ–ª–æ—Å–∞

/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ö–æ—Ç—è–±—ã —Ä–∞–∑!)
/help - –ø–æ–º–æ—â—å`
	msgHelpAdmin = msgHelp + `

<b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã</b> üòà:
/remove –ë–æ—Ä–∞—Ç 2 - —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞
/monitor - –æ–±–Ω–æ–≤–ª—è—é—â–∏–π—Å—è—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ status (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/reset - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –í–°–ï –≥–æ–ª–æ—Å–∞`
	msgAddNoFilm = "Invalid film name ü§°\n<span class=\"tg-spoiler\">Usage: /add –ó–µ–ª—ë–Ω—ã–π —Å–ª–æ–Ω–∏–∫ 2</span>"
	msgAddedTmpl = "\"%s\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ üìã‚úçÔ∏è"
)

func (b *Bot) isAdmin(userID int64) bool {
	return slices.Contains(b.admins, userID)
}

func (b *Bot) loadAdmins() error {
	admins, err := b.client.ChatAdmins(b.mainChatId)
	if err != nil {
		return err
	}

	uniq := map[int64]struct{}{}

	for _, id := range b.admins {
		uniq[id] = struct{}{}
	}
	for _, adm := range admins {
		uniq[adm.User.Id] = struct{}{}
	}

	res := make([]int64, 0, len(uniq))
	for id := range uniq {
		res = append(res, id)
	}
	b.admins = res

	return nil
}

func statusText(stats []storage.FilmStat, vote int) string {
	if len(stats) == 0 {
		return "–§–∏–ª—å–º–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üíÄ"
	}

	first, second := getPositions(stats)
	builder := strings.Builder{}
	for i := range stats {
		emoj := ""
		if stats[i].Id == vote {
			emoj = " üíã"
		}
		builder.WriteString(fmt.Sprintf(
			"%s<b>%s</b>: %d%s\n",
			getEmoj(i, first, second), stats[i].Name, stats[i].Votes, emoj,
		))
	}

	return builder.String()
}

func getPositions(stats []storage.FilmStat) (first, second int) {
	max1, max2 := stats[0].Votes, 0
	for i := range stats {
		cur := stats[i].Votes
		if cur == max1 {
			first++
		} else if cur == max2 {
			second++
		} else if cur > max2 {
			if max2 == 0 {
				max2 = cur
				second++
			} else {
				break
			}
		}
	}
	return
}

func getEmoj(i int, first int, second int) string {
	if first > 3 {
		return ""
	}
	if i < first {
		if first == 1 {
			return "üèÜ "
		}
		return "ü•á "
	}
	if i < first+second {
		if second > 3 {
			return ""
		}
		return "ü•à "
	}
	return ""
}
